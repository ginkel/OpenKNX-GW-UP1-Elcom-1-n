[platformio]
; default_envs = build
libdeps_dir = /tmp/libdeps
extra_configs =
  lib/OGM-Common/platformio.base.ini
  lib/OGM-Common/platformio.rp2040.ini
  lib/OGM-Common/platformio.samd.ini

;
; customer build_flags
;
[custom]
lib_deps = lib/OFM-FileTransferModule
build_flags =
  ${KNX_TP.build_flags}
  ; -D KNX_AUTO_ADAPT
  ; -D KNX_WAIT_FOR_ADDR # ensures rx of an address (GA or PA) with higher ACK probability, but takes 7ms in knx.loop()!
  ; -D OPENKNX_LOOPTIME_WARNING=13 # should be set with KNX_WAIT_FOR_ADDR to OPENKNX_LOOPTIME_WARNING + 7

; debug parameters
[custom_develop]
extends = custom
build_flags =
  ${custom.build_flags}
  -D OPENKNX_HEARTBEAT
  ; -D OPENKNX_HEARTBEAT_PRIO
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240
  ; -D DEBUG_LOOP_TIME=10  ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  ; "-D OPENKNX_TRACE1=Common.*"
  ; "-D OPENKNX_TRACE2=Flash.*"
debug_build_flags = -ggdb3

; this config block is for specifing options that are valid for all RP2040-based builds
[RP2040_custom]
extends = RP2040, custom
; platform = https://github.com/maxgerhardt/platform-raspberrypi.git#0b2e90a
; platform_packages = framework-arduinopico @ https://github.com/earlephilhower/arduino-pico/releases/download/2.7.3/rp2040-2.7.3.zip
; board = pipico
build_flags =
  -D SERIAL_DEBUG=Serial
  -Wunused-variable
  ; -iC:/Users/waldemar.porscha@sap.com/.platformio/packages/framework-arduinopico
  ; "@C:/Users/waldemar.porscha@sap.com/.platformio/packages/framework-arduinopico/lib/platform_inc.txt"
  ;-D NCN5120

; this config block is for specifing options that are valid for all RP2040-based develop/debug builds
[RP2040_custom_develop]
extends = RP2040_develop, RP2040_custom, custom_develop
build_flags =
  ${RP2040_develop.build_flags}
  ${RP2040_custom.build_flags}
  ${custom_develop.build_flags}
debug_build_flags =
  ${custom_develop.debug_build_flags}
  -O0

; this config block is for specifing options that are valid for all RP2040-based release builds
[RP2040_custom_releases]
extends = RP2040_releases, RP2040_custom, custom
build_flags =
  ${RP2040_releases.build_flags}
  ${RP2040_custom.build_flags}
  ${custom.build_flags}
  -O0


[env:develop_RP2040]
extends = RP2040_custom_develop, RP2040_2MB
build_flags =
   ${RP2040_custom_develop.build_flags}

[env:upload_USB_RP2040]
extends = UPLOAD_USB_RP2040, env:develop_RP2040

[env:upload_JLINK_RP2040]
extends = UPLOAD_JLINK, env:develop_RP2040

; Releases
[env:release_GW_UP1_ELCOM_1N]
extends = RP2040_custom_releases
build_flags =
   ${RP2040_custom_releases.build_flags}
  -D DEBUG_WAIT_FOR_SERIAL=1000
  -D WATCHDOG
  -D BOARD_GW_UP1_ELCOM_1N
board_build.filesystem_size = 0.5m
